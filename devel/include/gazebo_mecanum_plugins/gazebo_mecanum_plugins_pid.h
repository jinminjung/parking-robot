// Generated by gencpp from file gazebo_mecanum_plugins/gazebo_mecanum_plugins_pid.msg
// DO NOT EDIT!


#ifndef GAZEBO_MECANUM_PLUGINS_MESSAGE_GAZEBO_MECANUM_PLUGINS_PID_H
#define GAZEBO_MECANUM_PLUGINS_MESSAGE_GAZEBO_MECANUM_PLUGINS_PID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_mecanum_plugins
{
template <class ContainerAllocator>
struct gazebo_mecanum_plugins_pid_
{
  typedef gazebo_mecanum_plugins_pid_<ContainerAllocator> Type;

  gazebo_mecanum_plugins_pid_()
    : LR_P(0.0)
    , LR_I(0.0)
    , LR_D(0.0)
    , LF_P(0.0)
    , LF_I(0.0)
    , LF_D(0.0)
    , RF_P(0.0)
    , RF_I(0.0)
    , RF_D(0.0)
    , RR_P(0.0)
    , RR_I(0.0)
    , RR_D(0.0)  {
    }
  gazebo_mecanum_plugins_pid_(const ContainerAllocator& _alloc)
    : LR_P(0.0)
    , LR_I(0.0)
    , LR_D(0.0)
    , LF_P(0.0)
    , LF_I(0.0)
    , LF_D(0.0)
    , RF_P(0.0)
    , RF_I(0.0)
    , RF_D(0.0)
    , RR_P(0.0)
    , RR_I(0.0)
    , RR_D(0.0)  {
  (void)_alloc;
    }



   typedef double _LR_P_type;
  _LR_P_type LR_P;

   typedef double _LR_I_type;
  _LR_I_type LR_I;

   typedef double _LR_D_type;
  _LR_D_type LR_D;

   typedef double _LF_P_type;
  _LF_P_type LF_P;

   typedef double _LF_I_type;
  _LF_I_type LF_I;

   typedef double _LF_D_type;
  _LF_D_type LF_D;

   typedef double _RF_P_type;
  _RF_P_type RF_P;

   typedef double _RF_I_type;
  _RF_I_type RF_I;

   typedef double _RF_D_type;
  _RF_D_type RF_D;

   typedef double _RR_P_type;
  _RR_P_type RR_P;

   typedef double _RR_I_type;
  _RR_I_type RR_I;

   typedef double _RR_D_type;
  _RR_D_type RR_D;





  typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> const> ConstPtr;

}; // struct gazebo_mecanum_plugins_pid_

typedef ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<std::allocator<void> > gazebo_mecanum_plugins_pid;

typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid > gazebo_mecanum_plugins_pidPtr;
typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid const> gazebo_mecanum_plugins_pidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator1> & lhs, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator2> & rhs)
{
  return lhs.LR_P == rhs.LR_P &&
    lhs.LR_I == rhs.LR_I &&
    lhs.LR_D == rhs.LR_D &&
    lhs.LF_P == rhs.LF_P &&
    lhs.LF_I == rhs.LF_I &&
    lhs.LF_D == rhs.LF_D &&
    lhs.RF_P == rhs.RF_P &&
    lhs.RF_I == rhs.RF_I &&
    lhs.RF_D == rhs.RF_D &&
    lhs.RR_P == rhs.RR_P &&
    lhs.RR_I == rhs.RR_I &&
    lhs.RR_D == rhs.RR_D;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator1> & lhs, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_mecanum_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9eb89efea79b06cdde55828e8174754b";
  }

  static const char* value(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9eb89efea79b06cdULL;
  static const uint64_t static_value2 = 0xde55828e8174754bULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_mecanum_plugins/gazebo_mecanum_plugins_pid";
  }

  static const char* value(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 LR_P\n"
"float64 LR_I\n"
"float64 LR_D\n"
"float64 LF_P\n"
"float64 LF_I\n"
"float64 LF_D\n"
"float64 RF_P\n"
"float64 RF_I\n"
"float64 RF_D\n"
"float64 RR_P\n"
"float64 RR_I\n"
"float64 RR_D\n"
;
  }

  static const char* value(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LR_P);
      stream.next(m.LR_I);
      stream.next(m.LR_D);
      stream.next(m.LF_P);
      stream.next(m.LF_I);
      stream.next(m.LF_D);
      stream.next(m.RF_P);
      stream.next(m.RF_I);
      stream.next(m.RF_D);
      stream.next(m.RR_P);
      stream.next(m.RR_I);
      stream.next(m.RR_D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gazebo_mecanum_plugins_pid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_pid_<ContainerAllocator>& v)
  {
    s << indent << "LR_P: ";
    Printer<double>::stream(s, indent + "  ", v.LR_P);
    s << indent << "LR_I: ";
    Printer<double>::stream(s, indent + "  ", v.LR_I);
    s << indent << "LR_D: ";
    Printer<double>::stream(s, indent + "  ", v.LR_D);
    s << indent << "LF_P: ";
    Printer<double>::stream(s, indent + "  ", v.LF_P);
    s << indent << "LF_I: ";
    Printer<double>::stream(s, indent + "  ", v.LF_I);
    s << indent << "LF_D: ";
    Printer<double>::stream(s, indent + "  ", v.LF_D);
    s << indent << "RF_P: ";
    Printer<double>::stream(s, indent + "  ", v.RF_P);
    s << indent << "RF_I: ";
    Printer<double>::stream(s, indent + "  ", v.RF_I);
    s << indent << "RF_D: ";
    Printer<double>::stream(s, indent + "  ", v.RF_D);
    s << indent << "RR_P: ";
    Printer<double>::stream(s, indent + "  ", v.RR_P);
    s << indent << "RR_I: ";
    Printer<double>::stream(s, indent + "  ", v.RR_I);
    s << indent << "RR_D: ";
    Printer<double>::stream(s, indent + "  ", v.RR_D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_MECANUM_PLUGINS_MESSAGE_GAZEBO_MECANUM_PLUGINS_PID_H
