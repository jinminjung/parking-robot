// Generated by gencpp from file gazebo_mecanum_plugins/gazebo_mecanum_plugins_vel.msg
// DO NOT EDIT!


#ifndef GAZEBO_MECANUM_PLUGINS_MESSAGE_GAZEBO_MECANUM_PLUGINS_VEL_H
#define GAZEBO_MECANUM_PLUGINS_MESSAGE_GAZEBO_MECANUM_PLUGINS_VEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_mecanum_plugins
{
template <class ContainerAllocator>
struct gazebo_mecanum_plugins_vel_
{
  typedef gazebo_mecanum_plugins_vel_<ContainerAllocator> Type;

  gazebo_mecanum_plugins_vel_()
    : LEFT_REAR_vel(0.0)
    , LEFT_FRONT_vel(0.0)
    , RIGHT_FRONT_vel(0.0)
    , RIGHT_REAR_vel(0.0)  {
    }
  gazebo_mecanum_plugins_vel_(const ContainerAllocator& _alloc)
    : LEFT_REAR_vel(0.0)
    , LEFT_FRONT_vel(0.0)
    , RIGHT_FRONT_vel(0.0)
    , RIGHT_REAR_vel(0.0)  {
  (void)_alloc;
    }



   typedef double _LEFT_REAR_vel_type;
  _LEFT_REAR_vel_type LEFT_REAR_vel;

   typedef double _LEFT_FRONT_vel_type;
  _LEFT_FRONT_vel_type LEFT_FRONT_vel;

   typedef double _RIGHT_FRONT_vel_type;
  _RIGHT_FRONT_vel_type RIGHT_FRONT_vel;

   typedef double _RIGHT_REAR_vel_type;
  _RIGHT_REAR_vel_type RIGHT_REAR_vel;





  typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> const> ConstPtr;

}; // struct gazebo_mecanum_plugins_vel_

typedef ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<std::allocator<void> > gazebo_mecanum_plugins_vel;

typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel > gazebo_mecanum_plugins_velPtr;
typedef boost::shared_ptr< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel const> gazebo_mecanum_plugins_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator1> & lhs, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator2> & rhs)
{
  return lhs.LEFT_REAR_vel == rhs.LEFT_REAR_vel &&
    lhs.LEFT_FRONT_vel == rhs.LEFT_FRONT_vel &&
    lhs.RIGHT_FRONT_vel == rhs.RIGHT_FRONT_vel &&
    lhs.RIGHT_REAR_vel == rhs.RIGHT_REAR_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator1> & lhs, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_mecanum_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9df474704d7113e588f9ced0981881c";
  }

  static const char* value(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9df474704d7113eULL;
  static const uint64_t static_value2 = 0x588f9ced0981881cULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_mecanum_plugins/gazebo_mecanum_plugins_vel";
  }

  static const char* value(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 LEFT_REAR_vel\n"
"float64 LEFT_FRONT_vel\n"
"float64 RIGHT_FRONT_vel\n"
"float64 RIGHT_REAR_vel\n"
;
  }

  static const char* value(const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LEFT_REAR_vel);
      stream.next(m.LEFT_FRONT_vel);
      stream.next(m.RIGHT_FRONT_vel);
      stream.next(m.RIGHT_REAR_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gazebo_mecanum_plugins_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_mecanum_plugins::gazebo_mecanum_plugins_vel_<ContainerAllocator>& v)
  {
    s << indent << "LEFT_REAR_vel: ";
    Printer<double>::stream(s, indent + "  ", v.LEFT_REAR_vel);
    s << indent << "LEFT_FRONT_vel: ";
    Printer<double>::stream(s, indent + "  ", v.LEFT_FRONT_vel);
    s << indent << "RIGHT_FRONT_vel: ";
    Printer<double>::stream(s, indent + "  ", v.RIGHT_FRONT_vel);
    s << indent << "RIGHT_REAR_vel: ";
    Printer<double>::stream(s, indent + "  ", v.RIGHT_REAR_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_MECANUM_PLUGINS_MESSAGE_GAZEBO_MECANUM_PLUGINS_VEL_H
